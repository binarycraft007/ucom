.{
    .name = "ucom",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        .libev = .{
            .url = "git+https://codeberg.org/bytecraft/libev#e0d5f49f42d7c6073cf8f2101657f10c3c4c1c44",
            .hash = "1220f0867043af7f3952791b9f4e70c41881635e9d6bb30dd47106a6c31cbb294e0f",
        },
        .mnl = .{
            .url = "git+https://github.com/binarycraft007/mnl#3a7220b9e1a456b9cec2f50a4e0f5a399c295abd",
            .hash = "1220b48964391eab321dee85fa0516cd97442b29c4161317783058085f3e79a4dc8a",
        },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
